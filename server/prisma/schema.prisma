// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

enum shift {
  M
  E
}

model User {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(50)
  father_name String   @db.VarChar(50)
  email       String   @unique @db.VarChar(100)
  password    String
  cnic        String   @unique
  RollNo      String?  @unique
  DOB         DateTime
  designation String?
  role        UserRole
  shift       shift?
  batch       Int?
  active      Boolean
  otp         String?
  resetToken  String?  @unique

  // relations
  // token UserToken?

  teacherAssigned Class[] @relation("teacher")
  studentEnrolled Class[]

  @@map(name: "user")
}

model Course {
  id          Int    @id @default(autoincrement())
  courseId    String @unique @db.VarChar(50)
  courseName  String @db.VarChar(50)
  creditHours Int    @db.SmallInt

  classes Class[]
  @@map(name: "course")
}

// model UserToken {
//   @@map(name: "userToken")
//   id Int @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   token String @unique

//   user User @relation(fields: [userId], references: [id])
//   userId Int @unique
// }

model Class {
  id       Int     @id @default(autoincrement())
  enrolled Boolean

  courseId Int
  course   Course @relation(fields: [courseId], references: [id])

  teacherId Int
  teacher   User @relation("teacher", fields: [teacherId], references: [id])

  studentIds       Int[]
  students         User[]
  AttendanceRecord AttendanceRecord[]
}

model AttendanceRecord {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  classId   Int
  class     Class    @relation(fields: [classId], references: [id])
  attendances Attendance[]
}

model Attendance {
 id Int  @id @default(autoincrement())
 createdAt  DateTime  @default(now())
 updatedAt DateTime  @default(now())
 isPresent  Boolean  @default(false)
 studentId String
 attendanceRecordId   Int
 attendanceRecord   AttendanceRecord  @relation(fields: [attendanceRecordId], references: [id])
}